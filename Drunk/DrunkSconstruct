# -*-python-*-
Import('*')
import os.path
import copy
import sys


############### OpenKore Standard Library ###############
#osl_objects = env.StaticObject(Split('''
	#OSL/Object.cpp
	#OSL/Exception.cpp
	#OSL/Pointer.cpp
	#OSL/Net/Socket.cpp
	#OSL/Net/ServerSocket.cpp
	#OSL/Threading/Runnable.cpp
	#OSL/Threading/MutexLocker.cpp
	#OSL/Threading/Atomic.cpp
	#OSL/Threading/Mutex.cpp
	#OSL/Threading/Thread.cpp
	#OSL/IO/OutputStream.cpp
	#OSL/IO/InputStream.cpp
	#OSL/IO/IOException.cpp
	#OSL/IO/BufferedOutputStream.cpp
#'''))

if win32:
	osl_libs = ['moldname', 'kernel32', 'user32', 'gdi32', 'winspool', 'comdlg32', 'advapi32', 'shell32', 'ole32', 'oleaut32', 'netapi32', 'uuid', 'ws2_32', 'mpr', 'winmm', 'version', 'odbc32', 'odbccp32', 'comctl32']
else:
	osl_libs = ['pthread']
	if platform == "sunos":
		osl_libs += ['socket', 'nsl']

#env.Program('OSL/test/unit/run-tests', Split('''
	#OSL/test/unit/main.cpp
	#OSL/test/unit/AtomicTest.cpp
	#OSL/test/unit/ObjectTest.cpp
	#OSL/test/unit/ExceptionTest.cpp
	#OSL/test/unit/PointerTest.cpp
	#''') + osl_objects,
	#LIBS = osl_libs)


############### Define sources ###############

# C/C++ source files
sources = []
# XS source files (input : output)
XS_sources = {}

### DrunkPath
sources += [
	'DrunkPath/algorithm.cpp',
	'DrunkPath/PathFinding.xs.cpp'
]
XS_sources['DrunkPath/PathFinding.xs'] = 'DrunkPath/PathFinding.xs.cpp'

###################################################

if sys.version_info >= (3,0,0):
    for input, output in XS_sources.items():
	    perlenv.XS(output, input)
else:
    for input, output in XS_sources.iteritems():
	    perlenv.XS(output, input)


############### DrunkPath ###############

# External library dependencies
deps = copy.copy(osl_libs)
deps_path = []

if not win32:
	deps += [READLINE_LIB]
	if have_ncurses:
		deps += ['ncurses']
	else:
		deps += ['termcap']
		deps_path += ['/usr/lib/termcap']
else:
	deps += ['winmm', 'wininet']

perlenv['LIBS'] += deps
perlenv['LIBPATH'] += deps_path

# We're linking C++ objects so force usage of g++
DrunkPath = perlenv.NativeDLL('DrunkPath', sources, CC = 'g++')

if not win32 and not darwin:
	# Perl expects DrunkPath.so, not libDrunkPath.so, so create symlink.
	perlenv.Command('DrunkPath.so', DrunkPath,
		[['ln', '-sf', 'libDrunkPath.so', 'DrunkPath.so']],
		chdir=1)

